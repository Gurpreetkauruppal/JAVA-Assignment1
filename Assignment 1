class Book {
    String title;
    String author;
    int publicationYear;
    Book nextBook;

    public Book(String title, String author, int publicationYear) {
        this.title = title;
        this.author = author;
        this.publicationYear = publicationYear;
        this.nextBook = null;
    }
}

class BookLinkedList {
    private Book head;
    private Book tail;

    public void addToBeginning(String title, String author, int publicationYear) {
        Book newBook = new Book(title, author, publicationYear);
        if (head == null) {
            head = tail = newBook;
        } else {
            newBook.nextBook = head;
            head = newBook;
        }
    }

    public void addToEnd(String title, String author, int publicationYear) {
        Book newBook = new Book(title, author, publicationYear);
        if (head == null) {
            head = tail = newBook;
        } else {
            tail.nextBook = newBook;
            tail = newBook;
        }
    }

    public void removeFromBeginning() {
        if (head != null) {
            head = head.nextBook;
        } else {
            System.out.println("The list is empty.");
        }
    }

    public void removeFromEnd() {
        if (head != null) {
            if (head == tail) {
                head = tail = null;
            } else {
                Book current = head;
                while (current.nextBook != tail) {
                    current = current.nextBook;
                }
                current.nextBook = null;
                tail = current;
            }
        } else {
            System.out.println("The list is empty.");
        }
    }

    public void printList() {
        Book current = head;
        while (current != null) {
            System.out.println(current.title + " - " + current.author + " (" + current.publicationYear + ")");
            current = current.nextBook;
        }
    }

    public void printReverse() {
        printReverseRecursive(head);
    }

    private void printReverseRecursive(Book node) {
        if (node == null) {
            return;
        }
        printReverseRecursive(node.nextBook);
        System.out.println(node.title + " - " + node.author + " (" + node.publicationYear + ")");
    }
}

public class Main {
    public static void main(String[] args) {
        BookLinkedList bookList = new BookLinkedList();

        // Add books to the linked list
        bookList.addToEnd("Book 1", "Author A", 2000);
        bookList.addToEnd("Book 2", "Author B", 2010);
        bookList.addToEnd("Book 3", "Author C", 2022);

        // Print the list of books
        System.out.println("List of books:");
        bookList.printList();

        // Print the list of books in reverse order
        System.out.println("\nList of books in reverse order:");
        bookList.printReverse();

        // Remove a book from the beginning and end of the list
        bookList.removeFromBeginning();
        bookList.removeFromEnd();

        // Print the updated list of books
        System.out.println("\nUpdated list of books:");
        bookList.printList();
    }
}

EXERCISE 2

import java.util.Stack;

class WebPage {
    String url;
    String timestamp;

    public WebPage(String url, String timestamp) {
        this.url = url;
        this.timestamp = timestamp;
    }
}

class WebPageStack {
    private Stack<WebPage> stack;

    public WebPageStack() {
        stack = new Stack<>();
    }

    public void addWebPage(String url, String timestamp) {
        WebPage newPage = new WebPage(url, timestamp);
        stack.push(newPage);
    }

    public WebPage removeMostRecentWebPage() {
        if (!stack.isEmpty()) {
            return stack.pop();
        } else {
            System.out.println("The stack is empty.");
            return null;
        }
    }

    public void printMostRecentWebPage() {
        if (!stack.isEmpty()) {
            WebPage mostRecentPage = stack.peek();
            System.out.println("Most recent web page:");
            System.out.println("URL: " + mostRecentPage.url);
            System.out.println("Timestamp: " + mostRecentPage.timestamp);
        } else {
            System.out.println("The stack is empty.");
        }
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }
}

public class Main {
    public static void main(String[] args) {
        WebPageStack webPageStack = new WebPageStack();

        // Add web pages to the stack
        webPageStack.addWebPage("https://www.example.com/page1", "2023-07-27 09:30:00");
        webPageStack.addWebPage("https://www.example.com/page2", "2023-07-27 10:15:00");
        webPageStack.addWebPage("https://www.example.com/page3", "2023-07-27 11:00:00");

        // Print the most recent web page without removing it from the stack
        webPageStack.printMostRecentWebPage();

        // Remove the most recent web page from the stack
        WebPage removedPage = webPageStack.removeMostRecentWebPage();
        if (removedPage != null) {
            System.out.println("\nRemoved web page:");
            System.out.println("URL: " + removedPage.url);
            System.out.println("Timestamp: " + removedPage.timestamp);
        }

        // Check if the stack is empty
        System.out.println("\nIs the stack empty? " + webPageStack.isEmpty());
    }
}

EXERCISE 3


class Order {
    String customerName;
    String drinkType;
    String size;

    public Order(String customerName, String drinkType, String size) {
        this.customerName = customerName;
        this.drinkType = drinkType;
        this.size = size;
    }
}

class OrderQueue {
    private Queue<Order> queue;

    public OrderQueue() {
        queue = new LinkedList<>();
    }

    public void addOrder(String customerName, String drinkType, String size) {
        Order newOrder = new Order(customerName, drinkType, size);
        queue.add(newOrder);
    }

    public Order removeNextOrder() {
        if (!queue.isEmpty()) {
            return queue.poll();
        } else {
            System.out.println("The queue is empty.");
            return null;
        }
    }

    public void printNextOrder() {
        if (!queue.isEmpty()) {
            Order nextOrder = queue.peek();
            System.out.println("Next order:");
            System.out.println("Customer: " + nextOrder.customerName);
            System.out.println("Drink: " + nextOrder.drinkType);
            System.out.println("Size: " + nextOrder.size);
        } else {
            System.out.println("The queue is empty.");
        }
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }
}

public class Main {
    public static void main(String[] args) {
        OrderQueue orderQueue = new OrderQueue();

        // Add orders to the queue
        orderQueue.addOrder("John", "Cappuccino", "Medium");
        orderQueue.addOrder("Alice", "Latte", "Large");
        orderQueue.addOrder("Bob", "Espresso", "Small");

        // Print the next order without removing it from the queue
        orderQueue.printNextOrder();

        // Remove the next order from the queue
        Order removedOrder = orderQueue.removeNextOrder();
        if (removedOrder != null) {
            System.out.println("\nRemoved order:");
            System.out.println("Customer: " + removedOrder.customerName);
            System.out.println("Drink: " + removedOrder.drinkType);
            System.out.println("Size: " + removedOrder.size);
        }

        // Check if the queue is empty
        System.out.println("\nIs the queue empty? " + orderQueue.isEmpty());
    }
}
Exercise 4

class Song {
    String title;
    String artist;
    int duration; // In seconds

    public Song(String title, String artist, int duration) {
        this.title = title;
        this.artist = artist;
        this.duration = duration;
    }
}

class Playlist {
    private class Node {
        Song song;
        Node next;

        public Node(Song song) {
            this.song = song;
            this.next = null;
        }
    }

    private Node head;
    private Node tail;

    public void addSongToBeginning(String title, String artist, int duration) {
        Song newSong = new Song(title, artist, duration);
        Node newNode = new Node(newSong);
        if (head == null) {
            head = tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    public void addSongToEnd(String title, String artist, int duration) {
        Song newSong = new Song(title, artist, duration);
        Node newNode = new Node(newSong);
        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    public void removeSongFromBeginning() {
        if (head != null) {
            head = head.next;
        } else {
            System.out.println("The playlist is empty.");
        }
    }

    public void removeSongFromEnd() {
        if (head != null) {
            if (head == tail) {
                head = tail = null;
            } else {
                Node current = head;
                while (current.next != tail) {
                    current = current.next;
                }
                current.next = null;
                tail = current;
            }
        } else {
            System.out.println("The playlist is empty.");
        }
    }

    public void shufflePlaylist() {
        // Convert the linked list to an array
        Song[] songsArray = new Song[size()];
        int index = 0;
        Node current = head;
        while (current != null) {
            songsArray[index++] = current.song;
            current = current.next;
        }

        // Shuffle the array using Fisher-Yates algorithm
        for (int i = songsArray.length - 1; i >= 1; i--) {
            int j = (int) (Math.random() * (i + 1));
            Song temp = songsArray[i];
            songsArray[i] = songsArray[j];
            songsArray[j] = temp;
        }

        // Convert the shuffled array back to a linked list
        head = tail = null;
        for (Song song : songsArray) {
            addSongToEnd(song.title, song.artist, song.duration);
        }
    }

    private int size() {
        int count = 0;
        Node current = head;
        while (current != null) {
            count++;
            current = current.next;
        }
        return count;
    }

    public void printPlaylist() {
        Node current = head;
        while (current != null) {
            System.out.println(current.song.title + " - " + current.song.artist + " (" + current.song.duration + "s)");
            current = current.next;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Playlist playlist = new Playlist();

        // Add songs to the playlist
        playlist.addSongToEnd("Song 1", "Artist A", 180);
        playlist.addSongToEnd("Song 2", "Artist B", 220);
        playlist.addSongToEnd("Song 3", "Artist C", 200);

        // Print the playlist
        System.out.println("Playlist:");
        playlist.printPlaylist();

        // Remove a song from the beginning and end of the playlist
        playlist.removeSongFromBeginning();
        playlist.removeSongFromEnd();

        // Print the updated playlist
        System.out.println("\nUpdated Playlist:");
        playlist.printPlaylist();

        // Shuffle the playlist
        playlist.shufflePlaylist();

        // Print the shuffled playlist
        System.out.println("\nShuffled Playlist:");
        playlist.printPlaylist();
    }
}

EXERCISE 5

import java.util.Stack;

class DrawingAction {
    String type;
    String[] parameters;

    public DrawingAction(String type, String[] parameters) {
        this.type = type;
        this.parameters = parameters;
    }
}

class DrawingAppStack {
    private Stack<DrawingAction> undoStack;
    private Stack<DrawingAction> redoStack;

    public DrawingAppStack() {
        undoStack = new Stack<>();
        redoStack = new Stack<>();
    }

    public void addActionToUndoStack(String type, String[] parameters) {
        DrawingAction newAction = new DrawingAction(type, parameters);
        undoStack.push(newAction);
    }

    public void moveActionFromUndoToRedo() {
        if (!undoStack.isEmpty()) {
            DrawingAction recentAction = undoStack.pop();
            redoStack.push(recentAction);
        } else {
            System.out.println("Undo stack is empty.");
        }
    }

    public void moveActionFromRedoToUndo() {
        if (!redoStack.isEmpty()) {
            DrawingAction recentAction = redoStack.pop();
            undoStack.push(recentAction);
        } else {
            System.out.println("Redo stack is empty.");
        }
    }

    public void printMostRecentAction() {
        if (!undoStack.isEmpty()) {
            DrawingAction recentAction = undoStack.peek();
            System.out.println("Most recent action:");
            System.out.println("Type: " + recentAction.type);
            System.out.print("Parameters: ");
            for (String param : recentAction.parameters) {
                System.out.print(param + " ");
            }
            System.out.println();
        } else {
            System.out.println("Undo stack is empty.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        DrawingAppStack drawingStack = new DrawingAppStack();

        // Add actions to the undo stack
        drawingStack.addActionToUndoStack("draw", new String[] {"line", "x1", "y1", "x2", "y2"});
        drawingStack.addActionToUndoStack("move", new String[] {"circle", "x", "y"});
        drawingStack.addActionToUndoStack("resize", new String[] {"rectangle", "width", "height"});

        // Print the most recent action without removing it from the undo stack
        drawingStack.printMostRecentAction();

        // Move the most recent action from the undo stack to the redo stack
        drawingStack.moveActionFromUndoToRedo();

        // Print the updated most recent action without removing it from the undo stack
        drawingStack.printMostRecentAction();

        // Move the most recent action from the redo stack to the undo stack
        drawingStack.moveActionFromRedoToUndo();

        // Print the updated most recent action without removing it from the undo stack
        drawingStack.printMostRecentAction();
    }
}




   

